name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  release:
    types: [published]

env:
  CARGO_TERM_COLOR: always

jobs:
#   clippy:
#     name: Clippy
#     runs-on: ubuntu-24.04
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4
#         with:
#           submodules: recursive

#       - name: Install Rust
#         uses: dtolnay/rust-toolchain@stable
#         with:
#           components: clippy

#       - name: Cache cargo registry
#         uses: actions/cache@v4
#         with:
#           path: |
#             ~/.cargo/registry/index
#             ~/.cargo/registry/cache
#             ~/.cargo/git/db
#             target
#           key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
#           restore-keys: |
#             ${{ runner.os }}-cargo-

#       - name: Install Linux dependencies
#         run: |
#           sudo apt-get update
#           sudo apt-get install -y \
#             libwebkit2gtk-4.1-dev \
#             libgtk-3-dev \
#             libglib2.0-dev \
#             libgobject-2.0-dev \
#             libgdk-pixbuf-2.0-dev \
#             libpango1.0-dev \
#             libatk1.0-dev \
#             libcairo2-dev \
#             libappindicator3-dev \
#             librsvg2-dev \
#             patchelf \
#             libudev-dev \
#             libusb-1.0-0-dev \
#             libhidapi-dev \
#             libftdi1-dev \
#             pkg-config \
#             build-essential \
#             libssl-dev \
#             cmake

#       - name: Run Clippy
#         run: cargo clippy --all-targets --all-features -- -D warnings

  build:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    # needs: clippy
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-24.04
            target: x86_64-unknown-linux-gnu
            bundle_name: freewili-updater-linux-x86_64
            
          - os: macos-latest
            target: aarch64-apple-darwin
            bundle_name: freewili-updater-macos-arm64
            
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            bundle_name: freewili-updater-windows-x64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0  # Fetch full git history

      - name: Get git hash
        id: git-hash
        shell: bash
        run: echo "hash=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
            target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-

      # Platform specific dependencies
      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-24.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            build-essential \
            curl \
            wget \
            file \
            libxdo-dev \
            libssl-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            patchelf \
            libudev-dev \
            libusb-1.0-0-dev \
            libhidapi-dev \
            libftdi1-dev \
            pkg-config \
            cmake

      # Install cargo-binstall for faster tool installation
      - name: Install cargo-binstall (Linux)
        if: matrix.os == 'ubuntu-24.04' || matrix.os == 'macos-latest'
        run: curl -L --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh | bash

      - name: Install cargo-binstall (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: Set-ExecutionPolicy Unrestricted -Scope Process; iex (iwr "https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.ps1").Content

      # Install Dioxus CLI using binstall
      - name: Install Dioxus CLI
        run: cargo binstall dioxus-cli --no-confirm --locked --github-token ${{ secrets.GITHUB_TOKEN }}


      # Build the application
      - name: Build release binary
        run: dx bundle --release --platform desktop --out-dir release_output

      # Prepare artifacts for upload
      - name: Prepare Linux artifact
        if: matrix.os == 'ubuntu-24.04'
        run: |
          mkdir -p artifacts
          # Copy all Linux package formats with git hash
          cp -v release_output/*.deb artifacts/${{ matrix.bundle_name }}-${{ steps.git-hash.outputs.hash }}.deb
          cp -v release_output/*.rpm artifacts/${{ matrix.bundle_name }}-${{ steps.git-hash.outputs.hash }}.rpm
          cp -v release_output/*.AppImage artifacts/${{ matrix.bundle_name }}-${{ steps.git-hash.outputs.hash }}.AppImage

      - name: Prepare macOS artifact
        if: matrix.os == 'macos-latest'
        run: |
          mkdir -p artifacts
          cp release_output/*.dmg artifacts/${{ matrix.bundle_name }}-${{ steps.git-hash.outputs.hash }}.dmg

      - name: Prepare Windows artifact
        if: matrix.os == 'windows-latest'
        run: |
          mkdir artifacts
          # Copy NSIS installer only (MSI disabled) with git hash
          Copy-Item "release_output/*.exe" "artifacts/${{ matrix.bundle_name }}-${{ steps.git-hash.outputs.hash }}-setup.exe"

      # Upload artifacts for all builds
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.bundle_name }}
          path: artifacts/*
          retention-days: 30

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release'
    permissions:
      contents: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -la artifacts/

      - name: Find and rename files for release
        run: |
          # Find files with git hashes and prepare them for upload
          find artifacts -name "*.deb" -exec cp {} ./linux-release.deb \;
          find artifacts -name "*.rpm" -exec cp {} ./linux-release.rpm \;
          find artifacts -name "*.AppImage" -exec cp {} ./linux-release.AppImage \;
          find artifacts -name "*.dmg" -exec cp {} ./macos-release.dmg \;
          find artifacts -name "*-setup.exe" -exec cp {} ./windows-release-setup.exe \;
          ls -la *.deb *.rpm *.AppImage *.dmg *.exe 2>/dev/null || echo "Some files may not exist"

      # Upload to GitHub Release
      - name: Upload Linux DEB to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./linux-release.deb
          asset_name: freewili-updater-linux-x86_64.deb
          asset_content_type: application/vnd.debian.binary-package

      - name: Upload Linux RPM to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./linux-release.rpm
          asset_name: freewili-updater-linux-x86_64.rpm
          asset_content_type: application/x-rpm

      - name: Upload Linux AppImage to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./linux-release.AppImage
          asset_name: freewili-updater-linux-x86_64.AppImage
          asset_content_type: application/x-executable

      - name: Upload macOS binary to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./macos-release.dmg
          asset_name: freewili-updater-macos-arm64.dmg
          asset_content_type: application/x-apple-diskimage

      - name: Upload Windows binary to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./windows-release-setup.exe
          asset_name: freewili-updater-windows-x64-setup.exe
          asset_content_type: application/x-msdownload
